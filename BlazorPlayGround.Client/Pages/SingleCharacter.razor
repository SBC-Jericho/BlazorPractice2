@page "/single-character/{id:int}"
@page "/single-character"
@inject IClientCharacterService ClientCharacterService
@inject IClientTeamService ClientTeamService
@inject IClientDifficultyService ClientDifficultyService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@if (Id is null)
{
    <PageTitle>Create a new Character</PageTitle>
    <h3>Create a new Character</h3>
}
else
{
    <PageTitle>Edit @character.Name</PageTitle>
    <h3>Edit @character.Name</h3>
}


<EditForm Model="character" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Name" @bind-Value="character.Name"
                         For="@(() => character.Name)"></MudTextField>
            <MudTextField Label="Bio" @bind-Value="character.Bio"
                          For="@(() => character.Bio)"
                          Lines="2"></MudTextField>
            <MudDatePicker Label="Birth Date" @bind-Date="character.BirthDate"></MudDatePicker>
            <MudRadioGroup Class="my-4" @bind-SelectedOption="character.TeamId">
                @foreach (var team in ClientTeamService.ClientTeam)
                {
                    <MudRadio Option="team.Id" Color="Color.Primary" Size="Size.Small">@team.Name</MudRadio>
                }
            </MudRadioGroup>
            <MudSelect Label="Difficulty" @bind-Value="character.DifficultyId">
                <MudSelectItem Value="0">Select Difficulty</MudSelectItem>
                @foreach (var difficulty in ClientDifficultyService.ClientDifficulty)
                {
                    <MudSelectItem Value="difficulty.Id">@difficulty.Title</MudSelectItem>
                }
            </MudSelect>
            <MudSwitch Label="Ready To Fight?" @bind-Checked="@character.isReadyToFight"
                        Color="Color.Primary">
            </MudSwitch>
            <br />
            <InputFile id="fileInput" OnChange="OnFileChange" hidden/>
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Filled.CloudUpload"
                       for="fileInput">
                Upload Image
            </MudButton>
            <ValidationMessage For="@(() => character.Image)" />
            <br />
            <MudImage Src="@character.Image" Elevation="25" Class="rounded my-2"></MudImage>
        </MudCardContent>
    </MudCard>
    <MudButton ButtonType="ButtonType.Submit" Class="mt-4" Color="Color.Primary" Variant="Variant.Filled">
        @btnText
    </MudButton>
    <MudButton @onclick="DeleteCharacter" Class="mt-4" Color="Color.Error" Variant="Variant.Filled">
        Delete Character
    </MudButton>

    
    <p style="height:500px;"></p> 
    <ValidationSummary />
</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    BlazorPlayGround.Shared.Models.Character character =
    new BlazorPlayGround.Shared.Models.Character();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save new Character" : "Update Character";
        await ClientTeamService.GetAllTeam();
        await ClientDifficultyService.GetAllDifficulty();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await ClientCharacterService.GetSingleCharacter((int)Id);
            if (result is not null)
                character = result;
            else
                NavigationManager.NavigateTo("/single-character");

        }
    }

    async Task HandleSubmit()
    {
        if (Id is null)
        {
            if (character.TeamId == 0)
            {
                Snackbar.Add(
                "Team is required!",
                Severity.Warning,
                config =>
            {
                config.ShowTransitionDuration = 200;
                config.HideTransitionDuration = 400;
                config.VisibleStateDuration = 2500;
            });
                return;
            }
            else if (character.DifficultyId== 0)
            {
                Snackbar.Add(
                "Difficulty is required!",
                Severity.Warning,
                config =>
            {
                config.ShowTransitionDuration = 200;
                config.HideTransitionDuration = 400;
                config.VisibleStateDuration = 2500;
            });
                return;
            }
            await ClientCharacterService.AddCharacter(character);
            StateHasChanged();

            Snackbar.Add(
            "Character Created Successfully!",
            Severity.Success,
            config =>
            {
            config.ShowTransitionDuration = 200;
            config.HideTransitionDuration = 400;
            config.VisibleStateDuration = 2500;
            });
        }
        else
        {
            await ClientCharacterService.UpdateCharacter((int)Id, character);
            Snackbar.Add(
          "Character Updated",
          Severity.Success,
          config =>
          {
              config.ShowTransitionDuration = 200;
              config.HideTransitionDuration = 400;
              config.VisibleStateDuration = 2500;
          });
        }

    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 200, 200);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        character.Image = imageData;

    }

    async Task DeleteCharacter()
    {
        await ClientCharacterService.DeleteCharacter(character.Id);
        NavigationManager.NavigateTo("/all-characters");
        StateHasChanged();
        Snackbar.Add(
       "Character Deleted",
       Severity.Success,
       config =>
       {
       config.ShowTransitionDuration = 200;
       config.HideTransitionDuration = 400;
       config.VisibleStateDuration = 2500;
       });
    }

}
